% This is the program for checking the frequency response experiment

% Created by Dean Freestone 21/07/2009


function FreqSweepGUI210709(varargin)

clc;clear;close all

CMDisconnect_ProFusionEEG4

ControlColor = 'white';
FS = 7;                     % set fontsize for the controls
FS2 = 14;                   % fontsize for figures
SavePath = [cd '\ResultsAndSettings\'];

% initialise parameters and make them global
                                                % here *s indicate global variables to be stored in the cell matrix                                               % the setting cell matrix
CompumedicsFileName = ' ';
rawEEG = [];                                    % initialise here so it is a global variable
t = [];
Dec_t = [];
CARDetrendedGoodEEG = [];                       % EEG data that is = dtrend(good EEG) - mean(detrended(EEG)) 
CorrectedCARDetrendedGoodEEG = [];              % same as above with stimuli that have been removed
DecCorrectedCARDetrendedGoodEEG = [];           % same as above but LP filtered and decimated
Chs = 1:64;                                     % * possible channels to be studied
NChs = length(Chs);                             % * make global for loops in different functions
StimIndex = [];                                 % * this guy is used for the artifact rejection
Flag = 0;                                       % this flag indicates that it the first time though loop, it will create a new file is this is the case, MIGHT GET REMOVED
FreqWhereNStimsChange = 10;                     % * 10 Hz is where NStims = 2*Stim Freq changes to NStims = StimFreq
TrigTime = [];                                  % * time of first trigger in each stim train        
Fs = [];                                        % * parameter from Compumedics EEG file
FsDec = [];                                     % * sampling rate after decimation
NumDataSegs = [];                               % parameter from Compumedics EEG file
SegStartTime = [];                              % parameter from Compumedics EEG file
SegDurn = [];                                   % parameter from Compumedics EEG file
StimFreq = [];                                  % * the frequency of the stimulation at the time where displayed
GUISettings = {};                               % this is the matrix that stores all the globals
StimNo = 1;                                     % * incremented for each stimulus in the sequences
MinBottomCh = [];                               % thes next 4 are made global for plotting the patches around stim artifacts
MinBottomCh = [];
MaxTopCh = [];
MaxTopCh = [];
MinBottomCh = [];
HighLightStartIndex1 = [];                      % artifact region
HighLightEndIndex1 = [];
HighLightStartIndex2 = [];                      % region used to interp
HighLightEndIndex2 = [];

% create a folder for the results and setting to be saved
DirCheck = exist(SavePath,'dir');
if DirCheck ~= 7            % if the save directory does not exist create a new one.
    mkdir(SavePath)
end

% create a folder for each channels for results to be saved
for nn=1:64%NChs
    ChDir = [cd '\ResultsAndSettings\Ch' num2str(nn)];
    DirCheck = exist(ChDir,'dir');
    if DirCheck ~= 7            % if the save directory does not exist create a new one.
        mkdir(ChDir)
    end
end

% create the figure
FreqRespFigure = figure('name','Evoked Dynamics Analysis GUI',...
    'color',ControlColor,...
    'units','normalized',...
    'toolbar','figure',...
    'menubar','none',...
    'position',[0.05, 0.04, 0.9, 0.91]);

% set up the dimensions and positioning of the controls
ControlsLeft = 0.02;                % normaized distance from the edge of the figure
ControlsBottom = 0.97;              % normaized distance from the bottom of the figure
ControlsWidth = 0.1;
ControlsHeight = 0.025;

AxBorder = 0.03;
LeftLim = ControlsLeft+2*ControlsWidth;
Ax1 = axes('units','normalized',...
    'position',[LeftLim+AxBorder,AxBorder,1-LeftLim-2*AxBorder,1-2*AxBorder],...
    'parent',FreqRespFigure);

% Start to draw on the controls
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Load Compumedics File',...
    'callback',@LoadFile,...
    'fontsize',FS);

uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Load GUI Settings',...
    'callback',@LoadSettings,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
SamplingRateText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Sampling Rate = ' num2str(Fs)],...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
NChannelsText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Number of Channels = ' num2str(NChs)],...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
NDataSegsText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Number of Segments = ' num2str(NumDataSegs)],...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
SegStartText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Seg Start Time/s = ' num2str(SegStartTime)],...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
SegDurationText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Seg Duration/s = ' num2str(SegDurn)],...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Segment Number',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

SegNumber = 2;
SegNumberEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(SegNumber), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Trigger Channel',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

TriggerCh = 65;
TriggerChEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(TriggerCh), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Stim Trig Thresh',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

StimTrigThresh = 0.11;
StimTrigThreshEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(StimTrigThresh), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Search Start wrt Seg (s)',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

StimThreshSearchTime = 0;
StimThreshSearchTimeEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(StimThreshSearchTime), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Find First Stim',...
    'callback',@FindFirstStim,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
ActualStartTime = 0;
ActualStartTimeEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(ActualStartTime), ...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-2*ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Channels',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ChannelsEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(Chs), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Offset for Plot',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

PlotOffset = 0.0001;         % volts
PlotOffsetEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(PlotOffset), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Time B4 Stims',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

TimeB4Stims = 0.2;         % seconds
TimeB4StimsEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(TimeB4Stims), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Epoch Lengths (1,2)',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

EpochLength1 = 2.5;         % seconds
EpochLength1Edit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth/2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(EpochLength1), ...
    'fontsize',FS);

EpochLength2 = 1.5;         % seconds
EpochLength2Edit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth+ControlsWidth/2 ControlsBottom ControlsWidth/2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(EpochLength2), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Find, Read and Plot Stim',...
    'callback',@GetTrigTimeAndLoadStim,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
StimFreqText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Stimulus Frequency = ' num2str(StimFreq)],...
    'backgroundcolor',ControlColor,...
    'fontsize',2*FS);

ControlsBottom = ControlsBottom-ControlsHeight;
StimNumberText = uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom 2*ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', ['Stim Number = ' num2str(StimNo)],...
    'backgroundcolor',ControlColor,...
    'fontsize',2*FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ControlsBottom = ControlsBottom-ControlsHeight;
Plot50HzOnOff = 0;
Plot50HzToggle = uicontrol('style','togglebutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Plot 50Hz Band Power',...
    'value',Plot50HzOnOff,...
    'callback',@Plot50Hz,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Noisy Channels',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

GoodChs = [];
NoisyChannels = [10 12 36 42 2 3 4 5 7 8 9 13 15 21 23 24 25 32 33 35 40 41 49 52 54 56 57 60 61];         % channels used as ref or stim or have poor quality. Excluded from CAR
NoisyChannelsEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(NoisyChannels), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Re-reference as CAR',...
    'callback',@Move2CAR,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-2*ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Artifact Detect Threshold',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

ArtifDetectThresh = 00013;        
ArtifDetectThreshEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(ArtifDetectThresh), ...
    'fontsize',FS);

PlotAveDiffStimsOnOff = 0;
ControlsBottom = ControlsBottom-ControlsHeight;
PlotAveDiffStimsToggle = uicontrol('style','togglebutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Plot Ave. Diff. Stims',...
    'value',PlotAveDiffStimsOnOff,...
    'callback',@PlotAveDiffStims,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Samp Either Side 2 Interp',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

NSamples2Interp = 25;         
NSamples2InterpEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(NSamples2Interp), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Samples Used For Interp',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

Samples4Interp = 50;        
Samples4InterpEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(Samples4Interp), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Highlight Stims',...
    'callback',@HighlightStims,...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Remove Artifact',...
    'callback',@RemoveArtifact,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-2*ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Anti-Aliasing Filt Cutoff & Order',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

AntiAliasLP = 300;    % Hz    
AntiAliasLPEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth/2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(AntiAliasLP), ...
    'fontsize',FS);

AntiAliasOrd = 50;      
AntiAliasOrdEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth+ControlsWidth/2 ControlsBottom ControlsWidth/2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(AntiAliasOrd), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Decimation Factor',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

DecFactor = 10;    % samples
DecFactorEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(DecFactor), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth*2 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Filter and Down Sample',...
    'callback',@DownSampleData,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-2*ControlsHeight;
BackOnOff = 0;
BackToggle = uicontrol('style','togglebutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', '<<',...
    'callback',@Back,...
    'value',BackOnOff,...
    'fontsize',FS);

uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+ControlsWidth/3 ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', '<',...
    'callback',@BackOne,...
    'fontsize',FS);

AcceptReject = 0;
AcceptRejectBackGround = 'green';
AcceptRejectToggle = uicontrol('style','togglebutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+2*ControlsWidth/3 ControlsBottom 2*ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Reject',...
    'value',AcceptReject,...
    'callback',@AcceptRejectFunc,...
    'fontsize',FS,...
    'backgroundcolor',AcceptRejectBackGround);

uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+4*ControlsWidth/3 ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', '>',...
    'callback',@ForwardOne,...
    'fontsize',FS);

ForwardOnOff = 0;
ForwardToggle = uicontrol('style','togglebutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+5*ControlsWidth/3 ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', '>>',...
    'callback',@Forward,...
    'value',ForwardOnOff,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~

ControlsBottom = ControlsBottom-2*ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'N Points for FFT',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

FFTPoints = 1024;    % samples
FFTPointsEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(FFTPoints), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','text',...
    'units', 'normalized',...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight],...
    'HorizontalAlignment','center',...
    'parent', FreqRespFigure,...
    'string', 'Range (Start1/Start2/Dur)',...
    'backgroundcolor',ControlColor,...
    'fontsize',FS);

FFTStartTime1 = 1;             % time in seconds wrt the first stimulation
FFTStartTime1Edit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(FFTStartTime1), ...
    'fontsize',FS);

FFTStartTime2 = 0;             % time in seconds wrt the first stimulation
FFTStartTime2Edit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth+ControlsWidth/3 ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(FFTStartTime2), ...
    'fontsize',FS);

FFTDuration = 1;                % seconds wrt FFT start time
FFTDurationEdit = uicontrol('style','edit', ...
    'BackgroundColor', 'white', ...
    'units', 'normalized',...
    'position', [ControlsLeft+ControlsWidth+2*ControlsWidth/3 ControlsBottom ControlsWidth/3 ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', num2str(FFTDuration), ...
    'fontsize',FS);

ControlsBottom = ControlsBottom-ControlsHeight;
uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Save Settings',...
    'callback',@SaveSettings,...
    'fontsize',FS);

uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Save Settings',...
    'callback',@SaveSettings,...
    'fontsize',FS);

uicontrol('style','pushbutton', ...
    'units', 'normalized', ...
    'position', [ControlsLeft+ControlsWidth ControlsBottom ControlsWidth ControlsHeight], ...
    'HorizontalAlignment','center', ...
    'parent', FreqRespFigure, ...
    'string', 'Save Data',...
    'callback',@SaveData,...
    'fontsize',FS);

% ~~~~~~~~~~~~~~~~~~~~~~~~~

% ProbeFreqLookup = [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ...
%         22 24 26 28 30 33 36 40 44 48 52 57 63 70];

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Here is the call back functions. This is the smarts in the program.
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    function LoadFile(varargin)
        
        UpdateSettings()
        
        StimNo = 1;
        set(StimNumberText,'string',['Stim Number = ' num2str(StimNo)])
        GUISettings = {};
        
        CompumedicsFileName = uigetdir('F:\Data from RCAS\20090524{D1DAD581-CC6B-409A-B0D5-09CAB1B538CC}.eeg','Select a study folder');
        [Fs, NChs, NumDataSegs, SegStartTime, SegDurn] = CMConnect_ProFusionEEG4(CompumedicsFileName);
        set(SamplingRateText,'String',['Sampling Rate = ' num2str(Fs)])
        set(NChannelsText,'String',['Number of Channels = ' num2str(NChs)])
        set(NDataSegsText,'String',['Number of Segments = ' num2str(NumDataSegs)])
        set(SegStartText,'String',['Seg Start Time/s = ' mat2str(SegStartTime)])
        set(SegDurationText,'String',['Seg Duration/s = ' mat2str(SegDurn)])
    end

    function LoadSettings(varargin)
         [FNAME PNAME] = uigetfile([SavePath 'GUISettings.mat']);
         PandFNAME = [PNAME FNAME];
         GUISettings = load(PandFNAME);
         GUISettings = GUISettings.GUISettings;
    end

% this finds the first trigger in the file
    function FindFirstStim(varargin)
        
        UpdateSettings()
        
        n=StimThreshSearchTime;         % get from the GUI
        TrigIndex = [];
        Duration = 5;                   % seconds
        TimeB4FirstStim = 0.5;          % seconds, allows the auto finder to work from here in.
        while isempty(TrigIndex)
            [Fs TriggerSig] = Get_Data_ProFusionEEG4(TriggerCh,SegStartTime(SegNumber)+n,Duration,1);
            TrigIndex = find(TriggerSig>StimTrigThresh,1,'first');
            n=n+Duration;
        end
        ActualStartTime = SegStartTime(SegNumber) + TrigIndex/Fs + (n - Duration) - TimeB4FirstStim;           % time in seconds after seg start time
        set(ActualStartTimeEdit,'String',num2str(ActualStartTime))
    end
   
    function GetTrigTimeAndStimFreq(varargin)
        
        if isempty(varargin)
            UpdateSettings()            % dont need to always update for speed reasons
        end
        
        StimReadDuration = 1;                               % seconds, to get the frequency
        Samples2Skip = 90;                                  % this is used to skip the first trigger detection and find the second to calc stim freq
        TrigWindowSize = 3300;
        
        [Fs TriggerSig] = Get_Data_ProFusionEEG4(TriggerCh,ActualStartTime,StimReadDuration,1);   % read 1 second to find first index and freq
        TrigIndex = find(TriggerSig>StimTrigThresh,1,'first');
        TrigTime = TrigIndex/Fs + ActualStartTime;           % time in seconds after seg start time
        TriggerSig_Temp = TriggerSig(TrigIndex+Samples2Skip:TrigIndex+Samples2Skip+TrigWindowSize);
        TrigIndex2_Temp = find(TriggerSig_Temp>StimTrigThresh,1,'first');
        TrigIndex2 = TrigIndex2_Temp + TrigIndex + Samples2Skip - 2;
        StimFreq = round(Fs/(TrigIndex2 - TrigIndex));
        set(StimFreqText,'String',['Stimulus Frequency = ' num2str(StimFreq)])
    end

    function GetTrigTimeAndLoadStim(varargin)
        GetTrigTimeAndStimFreq()
        ReadStim()
    end

    function ReadStim(varargin)

        if StimFreq < FreqWhereNStimsChange   
            [Fs rawEEG] = Get_Data_ProFusionEEG4(Chs,TrigTime-TimeB4Stims,EpochLength1,1);
%             NSamples = size(rawEEG,1);
            t = linspace(0,EpochLength1,EpochLength1*Fs);
        else
            [Fs rawEEG] = Get_Data_ProFusionEEG4(Chs,TrigTime-TimeB4Stims,EpochLength2,1);
%             NSamples = size(rawEEG,1);            
            t = linspace(0,EpochLength2,EpochLength2*Fs);
        end
        if isempty(varargin)                    % if there is no input argument then plot (ie. it is called from the GUI)
            PlotData(t,rawEEG,PlotOffset,Chs)
        end
    end
    
    function Plot50Hz(varargin)
        if get(Plot50HzToggle,'value')
            % read in 20 seconds of EEG data from all channels
            EEG50Hz = [];
            for q = 0:5:25
                [Fs EEG50HzTemp] = Get_Data_ProFusionEEG4(Chs,TrigTime+q,5,1);
                EEG50Hz = [EEG50Hz; EEG50HzTemp];
            end

    % calculate dft
    %         f = k*Fs/N => f/Fs = k/N = 50/10,000 = 1/200 => k = 1, N = 200
            FFTData = fft(EEG50Hz,1000);
            FiftyHz = abs(FFTData(6,:));
            bar(1:64,FiftyHz)
            axis tight
        else
            ReadStim()
        end
    end

    function Move2CAR(varargin)
        
        if isempty(varargin{2})
            UpdateSettings()            % we dont always want to update settings for speed reasons
        end
        % exclude noisy channels from the rawEEG matrix move to CAR and
        % plot
        GoodChs = setdiff(Chs, NoisyChannels);
        GoodEEG = rawEEG(:,GoodChs);
        DetrendedGoodEEG = detrend(GoodEEG);
        CAR = mean(DetrendedGoodEEG,2);
        CAR = CAR(:,ones(1,length(GoodChs)));
        CARDetrendedGoodEEG = detrend(DetrendedGoodEEG - CAR); 
        
        if isempty(varargin{2})
            PlotData(t,CARDetrendedGoodEEG,PlotOffset,GoodChs)
        end
    end

% this function is used to control the artifact correction method. 
    function PlotAveDiffStims(varargin)
        
        if isempty(varargin{2})
            UpdateSettings()
        end
                
        if PlotAveDiffStimsOnOff == 1
            
            StimIndex = [];             % re-initialise Stim Index
            AveDiffStims = [0; mean(abs(diff(CARDetrendedGoodEEG)),2)];
            
            if isempty(varargin{2})
                PlotData(t,AveDiffStims,1,1);
                hold on
                plot(t,ArtifDetectThresh*ones(length(AveDiffStims),1),'r','parent',Ax1);
                hold off
            end
            
            n=1;
            StimIndexTemp = find(AveDiffStims>ArtifDetectThresh,1,'first'); % find the first stim artifiact
%             StimIndexs = find(AveDiffStims>ArtifDetectThresh); % used for testing
            StimIndexJump = 20;     %samples, parameter used to make sure we don't detect the same stimulation twice
            while ~isempty(StimIndexTemp)
                if n == 1
                    StimIndex(n) = StimIndexTemp;
                else
                    StimIndex(n) = StimIndexTemp+StimIndex(n-1)+StimIndexJump-1;
                end
                StimIndexTemp = find(AveDiffStims(StimIndex(n)+StimIndexJump:end)>ArtifDetectThresh,1,'first');
                n=n+1;
            end
        else
            if isempty(varargin{2})
                PlotData(t,CARDetrendedGoodEEG,PlotOffset,GoodChs)
            end
        end
    end
        
    function HighlightStims(varargin)
        
        if isempty(varargin{2})
            UpdateSettings();
        end
        
        HighLightStartIndex1 = StimIndex - NSamples2Interp;
        HighLightEndIndex1 = StimIndex + NSamples2Interp;
        
        HighLightStartIndex2 = StimIndex - Samples4Interp;
        HighLightEndIndex2 = StimIndex + Samples4Interp;
        
        if isempty(varargin{2})

            for nnn = 1: length(StimIndex)

                patch([t(HighLightStartIndex1(nnn)) t(HighLightEndIndex1(nnn)) t(HighLightEndIndex1(nnn)) t(HighLightStartIndex1(nnn)) t(HighLightStartIndex1(nnn))],...
                    [MinBottomCh MinBottomCh MaxTopCh MaxTopCh MinBottomCh],...
                    'g',...
                    'AlphaDataMapping','none',...
                    'FaceAlpha',0.2,...                         % controls the transpenecy of the face
                    'FaceVertexAlphaData',0.2,...
                    'edgecolor','none',...
                    'parent',Ax1);

                patch([t(HighLightStartIndex2(nnn)) t(HighLightEndIndex2(nnn)) t(HighLightEndIndex2(nnn)) t(HighLightStartIndex2(nnn)) t(HighLightStartIndex2(nnn))],...
                    [MinBottomCh MinBottomCh MaxTopCh MaxTopCh MinBottomCh],...
                    'r',...
                    'AlphaDataMapping','none',...
                    'FaceAlpha',0.2,...                         % controls the transpenecy of the face
                    'FaceVertexAlphaData',0.2,...
                    'edgecolor','none',...
                    'parent',Ax1);
            end
        end
    end

    function RemoveArtifact(varargin)
        
        if isempty(varargin{2})
            UpdateSettings();
        end
        
        % remove artifact from one stim at a time
        CorrectedCARDetrendedGoodEEG = CARDetrendedGoodEEG;
        for nnn=1:length(HighLightStartIndex2)
            x = setdiff(HighLightStartIndex2(nnn):HighLightEndIndex2(nnn),HighLightStartIndex1(nnn):HighLightEndIndex1(nnn));
            y = CARDetrendedGoodEEG(x,:);
            xi = HighLightStartIndex2(nnn):HighLightEndIndex2(nnn);
            yi = interp1(x,y,xi,'pchip');
            
            CorrectedCARDetrendedGoodEEG(xi,:) = yi;
        end
        if isempty(varargin{2})
            PlotData(t,CorrectedCARDetrendedGoodEEG,PlotOffset,GoodChs)
        end
    end
        
    function DownSampleData(varargin)
        
        if isempty(varargin{2})
            UpdateSettings();
        end
        
        DecCorrectedCARDetrendedGoodEEG = CorrectedCARDetrendedGoodEEG;
        FsDec = Fs/DecFactor;
        Wn = AntiAliasLP/(FsDec/2);
        B = fir1(AntiAliasOrd,Wn);
        for nnn=1:length(GoodChs)
            DecCorrectedCARDetrendedGoodEEG(:,nnn) = filtfilt(B,1,CorrectedCARDetrendedGoodEEG(:,nnn));
        end
        DecCorrectedCARDetrendedGoodEEG = downsample(DecCorrectedCARDetrendedGoodEEG,DecFactor);
        Dec_t = downsample(t,DecFactor);
        
        if isempty(varargin{2})
            PlotData(Dec_t,DecCorrectedCARDetrendedGoodEEG,PlotOffset,GoodChs)
        end
    end

    function NextStim(varargin)
        JumpTime1 = 2.5;                                     % seconds
        JumpTime2 = 1.5;
        if StimFreq < FreqWhereNStimsChange
            ActualStartTime = TrigTime + JumpTime1;
        else
            ActualStartTime = TrigTime + JumpTime2;
        end
        set(ActualStartTimeEdit,'String',num2str(ActualStartTime))
    end

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    function Back(varargin)
        
        while get(BackToggle,'value')
            BackOne()
        end
    end

    function BackOne(varargin)
        

        if StimNo > 1
            % need to store existing settings to the cell matrix for the page we are currently looking at.
            % Then decrement the stim number
            WriteSetting2Cell()

            % then need to load the settings from the page we are trying to look at
            StimNo = StimNo - 1;
            set(StimNumberText,'string',['Stim Number = ' num2str(StimNo)])
            LoadSettingFromCell()

            ReadStim(1,1);                % entering an arguement stops it from doing redundant processing
            Move2CAR(1,1);
    %         HighlightStims(1,1);
            RemoveArtifact(1,1);
            DownSampleData(1,[]);
            drawnow
        end

    end

    function AcceptRejectFunc(varargin)
        if get(AcceptRejectToggle,'value')
            set(AcceptRejectToggle,'backgroundcolor','red');
        else
            set(AcceptRejectToggle,'backgroundcolor','green');
        end    
    end

    function ForwardOne(varargin)

        % store current settings of the one the is being viewed b4 going to
        % the new one
        WriteSetting2Cell()         % update settings is called from inside this function

        % increment Stim number
        StimNo = StimNo + 1;
        set(StimNumberText,'string',['Stim Number = ' num2str(StimNo)])
        if size(GUISettings,1) > StimNo    % load settings from when this was viewed last time from cell matrix

            LoadSettingFromCell()       % this guy should update all the GUI displays

            ReadStim(1,1);
            Move2CAR(1,1);
            RemoveArtifact(1,1);
            DownSampleData(1,[]);

        else 
            % use settings that are current in the GUI
            % increment StimNo and run through the functions
            NextStim();                                         % get the next stim time
            GetTrigTimeAndLoadStim();                           % read in the next stim
            Move2CAR(1,1);                                         % rereference
            PlotAveDiffStimsOnOff = 1;
            set(PlotAveDiffStimsToggle,'value',PlotAveDiffStimsOnOff);              % set to one to find the stim indexes
            PlotAveDiffStims(1,1);                                 % get indexes
            PlotAveDiffStimsOnOff = 0;
            set(PlotAveDiffStimsToggle,'value',PlotAveDiffStimsOnOff);           
            HighlightStims(1,1);                               
            RemoveArtifact(1,1);
            DownSampleData(1,[]);

        end

        drawnow

    end

    function Forward(varargin)
        
        while get(ForwardToggle,'value')
            ForwardOne()
        end
    end

% ~~~~~~~~~~~~~~~~~~~~~~~~~

% this function grabs all the values that can be entered and makes sure
% they are updated in the global variables. It should be called at the
% start of other functions.
    function UpdateSettings(varargin)
        
        SegNumber = str2num(get(SegNumberEdit,'String'));
        TriggerCh = str2num(get(TriggerChEdit,'String'));
        StimTrigThresh = str2num(get(StimTrigThreshEdit,'String'));
        StimThreshSearchTime = str2num(get(StimThreshSearchTimeEdit,'String'));
        ActualStartTime = str2num(get(ActualStartTimeEdit,'String'));
        
        Chs = str2num(get(ChannelsEdit,'String'));
        NChs = length(Chs);
        PlotOffset = str2num(get(PlotOffsetEdit,'String'));
        TimeB4Stims = str2num(get(TimeB4StimsEdit,'String'));
        EpochLength1 = str2num(get(EpochLength1Edit,'String'));
        EpochLength2 = str2num(get(EpochLength2Edit,'String'));
        
        NoisyChannels = str2num(get(NoisyChannelsEdit,'String'));
        
        ArtifDetectThresh = str2num(get(ArtifDetectThreshEdit,'String'));
        PlotAveDiffStimsOnOff = get(PlotAveDiffStimsToggle,'value');
        NSamples2Interp = str2num(get(NSamples2InterpEdit,'String'));
        Samples4Interp = str2num(get(Samples4InterpEdit,'String'));
        
        AntiAliasLP = str2num(get(AntiAliasLPEdit,'String'));
        AntiAliasOrd = str2num(get(AntiAliasOrdEdit,'String'));
        DecFactor = str2num(get(DecFactorEdit,'String'));
        
        FFTPoints = str2num(get(FFTPointsEdit,'String'));
        FFTStartTime1 = str2num(get(FFTStartTime1Edit,'String'));
        FFTStartTime2 = str2num(get(FFTStartTime2Edit,'String'));
        FFTDuration = str2num(get(FFTDurationEdit,'String'));
        
        AcceptReject = get(AcceptRejectToggle,'value');
    end

%     instead of saving the data each time we look at it we will save the
%     settings. Then we can automatics write the data to the appropriate
%     files and not have to wait.
    function LoadSettingFromCell(varargin)
        Index = 1;
            StimFreq = GUISettings{StimNo,Index};
            set(StimFreqText,'String',['Stimulus Frequency = ' num2str(StimFreq)])
        Index = 4;
            SegNumber = GUISettings{StimNo,Index};                  % load the value
            set(SegNumberEdit,'string',num2str(SegNumber))      % update the GUI
        Index = Index + 1;
            TriggerCh = GUISettings{StimNo,Index};                  % load the value
            set(StimTrigThreshEdit,'String',num2str(TriggerCh));
        Index = Index + 1; 
            StimTrigThresh = GUISettings{StimNo,Index};
            set(StimTrigThreshEdit,'String',num2str(StimTrigThresh));
        Index = Index + 1;      
            StimThreshSearchTime = GUISettings{StimNo,Index};                  % load the value
            set(StimThreshSearchTimeEdit,'String',num2str(StimThreshSearchTime));
        Index = Index + 1;
            ActualStartTime = GUISettings{StimNo,Index}; 
            set(ActualStartTimeEdit,'String',num2str(ActualStartTime));
        Index = Index + 1;
            Chs = GUISettings{StimNo,Index}; 
            set(ChannelsEdit,'String',num2str(Chs));
        Index = Index + 1;
            NChs = GUISettings{StimNo,Index};
        Index = Index + 1;            
            PlotOffset = GUISettings{StimNo,Index}; 
            set(PlotOffsetEdit,'String',num2str(PlotOffset));
        Index = Index + 1;
            TimeB4Stims = GUISettings{StimNo,Index};
            set(TimeB4StimsEdit,'String',num2str(TimeB4Stims));
        Index = Index + 1;
            EpochLength1 = GUISettings{StimNo,Index};
            set(EpochLength1Edit,'String',num2str(EpochLength1));
        Index = Index + 1;
            EpochLength2 = GUISettings{StimNo,Index};
            set(EpochLength2Edit,'String',num2str(EpochLength2));
        Index = Index + 1;
            NoisyChannels = GUISettings{StimNo,Index};
            set(NoisyChannelsEdit,'String',num2str(NoisyChannels));
        Index = Index + 1;
            ArtifDetectThresh = GUISettings{StimNo,Index};
            set(ArtifDetectThreshEdit,'String',num2str(ArtifDetectThresh));
        Index = Index + 1;
            PlotAveDiffStimsOnOff = GUISettings{StimNo,Index};
            set(PlotAveDiffStimsToggle,'value',PlotAveDiffStimsOnOff);
        Index = Index + 1;
            NSamples2Interp = GUISettings{StimNo,Index};
            set(NSamples2InterpEdit,'String',num2str(NSamples2Interp));
        Index = Index + 1;
            Samples4Interp = GUISettings{StimNo,Index};
            set(Samples4InterpEdit,'String',num2str(Samples4Interp));
        Index = Index + 1;
            AntiAliasLP = GUISettings{StimNo,Index};
            set(AntiAliasLPEdit,'String',num2str(AntiAliasLP));
        Index = Index + 1;
            AntiAliasOrd = GUISettings{StimNo,Index};
            set(AntiAliasOrdEdit,'String',num2str(AntiAliasOrd));
        Index = Index + 1;
            DecFactor = GUISettings{StimNo,Index};
            set(DecFactorEdit,'String',num2str(DecFactor));
        Index = Index + 1;
            FFTPoints = GUISettings{StimNo,Index};
            set(FFTPointsEdit,'String',num2str(FFTPoints));
        Index = Index + 1;
            FFTStartTime1 = GUISettings{StimNo,Index};
            set(FFTStartTime1Edit,'String',num2str(FFTStartTime1));
        Index = Index + 1;
            FFTStartTime2 = GUISettings{StimNo,Index};
            set(FFTStartTime2Edit,'String',num2str(FFTStartTime2));
        Index = Index + 1;
            FFTDuration = GUISettings{StimNo,Index};
            set(FFTDurationEdit,'String',num2str(FFTDuration));
        Index = Index + 1;
            AcceptReject = GUISettings{StimNo,Index};
            set(AcceptRejectToggle,'value',AcceptReject);  
            if AcceptReject
                set(AcceptRejectToggle,'backgroundcolor','red');
            else
                set(AcceptRejectToggle,'backgroundcolor','green');
            end
        Index = Index + 1;    
            GoodChs = GUISettings{StimNo,Index};
        Index = Index + 1;    
            TrigTime = GUISettings{StimNo,Index};
        Index = Index + 1;    
            HighLightStartIndex1 = GUISettings{StimNo,Index};
        Index = Index + 1;    
            HighLightStartIndex2 = GUISettings{StimNo,Index};
        Index = Index + 1;    
            HighLightEndIndex1 = GUISettings{StimNo,Index};
        Index = Index + 1;    
            HighLightEndIndex2 = GUISettings{StimNo,Index};
        Index = Index + 1;    
            StimIndex = GUISettings{StimNo,Index};
    end

    function WriteSetting2Cell(varargin)
        
        UpdateSettings()
        
        GUISettingsTemp = {StimFreq,StimNo,CompumedicsFileName,SegNumber,TriggerCh,StimTrigThresh,...
            StimThreshSearchTime,ActualStartTime,Chs,NChs,PlotOffset,TimeB4Stims,EpochLength1,...
            EpochLength2,NoisyChannels,ArtifDetectThresh,PlotAveDiffStimsOnOff,NSamples2Interp,Samples4Interp,...
            AntiAliasLP,AntiAliasOrd,DecFactor,FFTPoints,FFTStartTime1,FFTStartTime2,FFTDuration,AcceptReject,...
            GoodChs,TrigTime,HighLightStartIndex1,HighLightStartIndex2,HighLightEndIndex1,HighLightEndIndex2,...
            StimIndex};

        GUISettings(StimNo,:) = GUISettingsTemp;
    end

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    % this a plot function that can be called from any of the other
    % functions
    function PlotData(Time,Data,OS,Channels)
        
        UpdateSettings()
        
        NChannels = size(Data,2);
        
        % create matrix to add to EEG to separate channels
        OffsetMatTemp = 0:OS:OS*(NChannels-1);
        OffsetMat = OffsetMatTemp(ones(1,length(Time)),:);
        
        % detrend data and add offset 
        Temp = detrend(Data)+OffsetMat;
        MeanBottomCh = mean(Temp(:,1));
        MeanTopCh = mean(Temp(:,end));
        
        MinBottomCh = MeanBottomCh - 3*PlotOffset;              % x3 to capture top and bottom of Chs % min(Temp(:,1));
        MaxTopCh = MeanTopCh + 3*PlotOffset;                    %max(Temp(:,end));
        Ytickz = linspace(MeanBottomCh,MeanTopCh,NChannels);
        ChLabels = cell(1,NChannels);                                                  % create channel labels for plotting
        for n=1:NChannels
            ChLabels{n} = num2str(Channels(n));
        end
        
        plot(Time,Temp,'parent',Ax1), axis tight

        set(Ax1, 'fontsize', FS2,...
            'ytick',Ytickz,...
            'yticklabel',ChLabels,...
            'XMinorGrid','on')
        ylim(Ax1,[MinBottomCh, MaxTopCh])
    end

% in this function we save the stimulation response for each channel
% separately in a mat file. For each new iteration we load an existing
% file, modify it by adding the new data and the re-save
    function SaveData(varargin)
        
        for StimNo=1:size(GUISettings,1)            % go through all the stim numbers
            LoadSettingFromCell()                   % loads up all the important parameters for the stim number
            if AcceptReject == 0                    % means it was not rejected, so get data in right format for save
                ReadStim(1,1);
                Move2CAR(1,1);
                RemoveArtifact(1,1);
                DownSampleData(1,2);                % argin{2} = 2 to stop plots
                
                for nnn=1:length(GoodChs)             % go to all the good channels to save them
                    FileName = [cd '\ResultsAndSettings\Ch' num2str(GoodChs(nnn))...
                        '\Ch' num2str(GoodChs(nnn)) 'Freq' num2str(StimFreq) '.mat'];
                    FileCheck =  exist(FileName,'file');                % check if file exists
                    ChData = DecCorrectedCARDetrendedGoodEEG(:,nnn);
                    if StimFreq < FreqWhereNStimsChange
                        FFT_n_start = round((TimeB4Stims + FFTStartTime1)*FsDec);
                    else
                        FFT_n_start = round((TimeB4Stims + FFTStartTime2)*FsDec);
                    end

                    FFT_n_end = FFT_n_start + round(FsDec*FFTDuration);
                    FFTDataTemp = fft(ChData(FFT_n_start:FFT_n_end),FFTPoints*2);
                    FFTData = abs(FFTDataTemp(1:FFTPoints));            % just take the positive frequencies 
                    f = linspace(0,FsDec/2,FFTPoints);
                    
                    if (FileCheck == 0)           % file does not exist or we have started the program again
                        save(FileName,'Dec_t','ChData','f','FFTData')
                        Flag = 1;
                    else
                        Data = load(FileName);
                        ChData = [Data.ChData ChData];                  % if file exists concatenate new data onto existing data
                        FFTData = [Data.FFTData FFTData];
                        save(FileName,'Dec_t','ChData','f','FFTData')
                    end
                end
            end
        end
    end
 
    function SaveSettings(varargin)
        uisave('GUISettings',[SavePath 'GUISettings.mat']);
    end

end